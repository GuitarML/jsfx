desc:Panalysis (by Geraint Luff)

in_pin:Left
in_pin:Right
out_pin:Left
out_pin:Right

slider1:1<0,2,0.01>-Width
slider2:0<-1,1,0.01>-Rotation
slider3:0<0,1,1{no,yes}>-Invert width

import ui-lib.jsfx-inc

@init

freemem = ui_setup(0);
buffer_length = ceil(srate*0.15);
freemem = (buffer0 = freemem) + buffer_length;
freemem = (buffer1 = freemem) + buffer_length;
buffer_index = 0;

delay_fftsize = 2048;
delay_bufferlength = delay_fftsize;
freemem = (delay_bufferA = freemem) + delay_bufferlength*2;
freemem = (delay_bufferB = freemem) + delay_bufferlength*2;
freemem = (delay_bufferSum = freemem) + delay_bufferlength;

DISPLAY_SCREEN = 5;
ui_reserve_image(DISPLAY_SCREEN);

last_update_time = 0;
last_index = 0;

!fade_time ? fade_time = 0.1;

@sample

rot_sin = slider2*sqrt(0.5);
rot_cos = sqrt(1 - rot_sin*rot_sin);

mid = (spl0 + spl1)*0.5;
side = (spl1 - spl0)*0.5*slider1*(slider3 ? -1 : 1);

left = mid - side;
right = mid + side;

spl0 = left*rot_cos - right*rot_sin;
spl1 = left*rot_sin + right*rot_cos;

buffer0[buffer_index] = spl0;
buffer1[buffer_index] = spl1;

buffer_index += 1;
buffer_index >= buffer_length ? (
	buffer_index = 0;
);

// Delay analysis

function perform_delay_analysis() local(i, ratio, window, rA, iA, rB, iB, mag2, factor, max_abs, max_index, max_phase) (
	action_delay_analysis_reset ? (
		i = 0;
		while (i < delay_bufferlength) (
		  delay_bufferSum[i] = 0;
		  i += 1;
		);
		action_delay_analysis_reset = 0;
	);

	ratio = (delay_bufferindex/delay_bufferlength);
	window = 0.5 - 0.5*cos(ratio*2*$pi);

	delay_bufferA[delay_bufferindex*2] = spl0*window;
	delay_bufferA[delay_bufferindex*2 + 1] = 0;
	delay_bufferB[delay_bufferindex*2] = spl1*window;
	delay_bufferB[delay_bufferindex*2 + 1] = 0;

	delay_bufferindex += 1;
	delay_bufferindex >= delay_bufferlength ? (
		delay_bufferindex = 0;

		fft(delay_bufferA, delay_fftsize);
		fft(delay_bufferB, delay_fftsize);
		i = 0;
		while (i < delay_bufferlength) (
			rA = delay_bufferA[2*i];
			iA = delay_bufferA[2*i + 1];
			rB = delay_bufferB[2*i];
			iB = delay_bufferB[2*i + 1];
			mag2 = (rA*rA + iA*iA)*(rB*rB + iB*iB);
			factor = 1/(max(mag2, 0.000001))/delay_fftsize;
			delay_bufferA[2*i] = (rA*rB + iA*iB)*factor;
			delay_bufferA[2*i + 1] = (-rA*iB + iA*rB)*factor;
			i += 1;
		);
		ifft(delay_bufferA, delay_fftsize);

		max_abs = 0;
		max_phase = 1;
		max_index = 0;

		i = 0;
		while (i < delay_bufferlength) (
			i2 = (i + delay_bufferlength/2)%delay_bufferlength;
			value = delay_bufferSum[i2] += delay_bufferA[2*i];
			abs(value) >= max_abs ? (
				max_abs = abs(delay_bufferSum[i2]);
				max_index = i;
				max_phase = delay_bufferSum[i2] < 0 ? -1 : 1;
			);
			i += 1;
		);

		delay_samples = max_index;
		delay_samples > delay_bufferlength/2 ? (
			delay_samples -= delay_bufferlength;
		);
		delay_phase = max_phase;
	);
);

delay_analysis_active ? (
	perform_delay_analysis();
);

@gfx 510 660

function update_display() local(dest, imgW, imgH, t, dt, i, x, y, cx, cy, cr, mag, alpha) (
	control_background_technical();
	ui_push_clip();
		dest = gfx_dest;
		gfx_getimgdim(DISPLAY_SCREEN, imgW, imgH);
		imgW != ui_width() || imgH != ui_height() ? (
			gfx_setimgdim(DISPLAY_SCREEN, imgW = ui_width(), imgH = ui_height());
			gfx_dest = DISPLAY_SCREEN;
			ui_color(0, 0, 0);
			gfx_rect(0, 0, imgW, imgH);
		);
		gfx_dest = DISPLAY_SCREEN;

		t = time_precise();
		dt = t - last_update_time;
		debug.dt = dt;
		last_update_time = t;

		// Fade
		alpha = 1 - exp(-dt/fade_time);
		gfx_gradrect(0, 0, imgW, imgH, 0, 0, 0, alpha);
		gfx_a = sqrt(alpha);

		mag = pow(10, reference_db/20);
		cx = imgW*0.5;
		cy = imgH*0.5;
		cr = min(imgW, imgH)*0.45/2;
		i = 0;
		while (i < buffer_index) (
			x = cx + (buffer1[i] - buffer0[i])*cr/mag;
			y = cy - (buffer0[i] + buffer1[i])*cr/mag;
			i ? (
				gfx_lineto(x, y, 1);
			) : (
				gfx_x = x;
				gfx_y = y;
			);
			i += 1;
		);
		buffer_index = 0;

		gfx_dest = dest;
		gfx_x = ui_left();
		gfx_y = ui_top();
		gfx_a = 1;
		gfx_blit(DISPLAY_SCREEN, 1, 0);

		cx += ui_left();
		cy += ui_top();
		ui_push();
			ui_colora(64, 192, 256, 0.7*min(1, 0.4 + slider1/0.2));
			gfx_line(cx + 2*cr*slider1*rot_cos, cy + 2*cr*slider1*rot_sin, cx - 2*cr*rot_sin, cy + 2*cr*rot_cos);
			gfx_line(cx - 2*cr*slider1*rot_cos, cy - 2*cr*slider1*rot_sin, cx - 2*cr*rot_sin, cy + 2*cr*rot_cos);
			gfx_line(cx - 2*cr*slider1*rot_cos, cy - 2*cr*slider1*rot_sin, cx + 2*cr*rot_sin, cy - 2*cr*rot_cos);
			gfx_line(cx + 2*cr*slider1*rot_cos, cy + 2*cr*slider1*rot_sin, cx + 2*cr*rot_sin, cy - 2*cr*rot_cos);
		ui_pop();

		ui_push();
			ui_colora(255, 255, 255, 0.75);
			gfx_line(cx - 2*cr, cy, cx, cy - 2*cr);
			gfx_line(cx + 2*cr, cy, cx, cy + 2*cr);
			ui_colora(256, 64, 64, 1);
			gfx_line(cx + 2*cr, cy, cx, cy - 2*cr);
			gfx_line(cx - 2*cr, cy, cx, cy + 2*cr);
		ui_pop();
	ui_pop();
	control_finish_technical();
);

function labelled_dial_vertical(value, low, high, bias, label, formatvalue, formatstring, default, maxValue) (
	ui_push_height(50);
		value = control_dial(value, low, high, bias);
		ui_click() && ui_clickcount() == 2 ? (
			value = default;
		);
	ui_pop();
	ui_push_above(50);
		ui_text(label);
	ui_pop();
	ui_push_below(50);
		value > maxValue ? ui_color(255, 64, 64);
		ui_textnumber(formatvalue, formatstring);
	ui_pop();
	value;
);

function labelled_switch_vertical(value, label, valuestring) (
	ui_push_height(30);
		ui_push_width(60);
			value = control_switch(value);
		ui_pop();
	ui_pop();
	ui_push_above(50);
		ui_text(label);
	ui_pop();
	ui_push_below(50);
		ui_text(valuestring);
	ui_pop();
	value;
);

control_start("main", "tron");

delay_analysis_active = (ui_screen() == "delay-analysis");

ui_screen() == "main" ? (
	ui_split_top(150);
		ui_split_righttext("Delay");
			ui_split_bottomtext();
				control_button("Delay") ? (
					ui_screen_open("delay-analysis");
					action_delay_analysis_reset = 1;
					g_zoom = 1;
				);
			ui_pop();
		ui_pop();
		ui_split_rightratio(2/5);
			control_group("display");
			ui_split_leftratio(1/2);
				reference_db = labelled_dial_vertical(reference_db, -40, 0, 2, "Reference", floor(reference_db + 0.5), "%idB", 0, 1000000);
			ui_split_next();
				fade_time = labelled_dial_vertical(fade_time, 0.01, 1, 4.6, "Fade", floor(fade_time*1000 + 0.5), "%ims", 0.1, 1000000);
			ui_pop();
		ui_pop();

		control_group("stereo field");
		ui_split_leftratio(1/3);
			default_width = (rot_cos + rot_sin > 0) ? (rot_cos - rot_sin)/(rot_cos + rot_sin) : 0;
			default_width > 1 ? default_width = 1/default_width;
			slider1 = labelled_dial_vertical(slider1, 0, 2, 0, "Width", floor(slider1*100 + 0.5), "%i%%", default_width, default_width);
		ui_split_next();
			slider2 = labelled_dial_vertical(slider2, -1, 1, 0, "Rotate", abs(slider2*100), slider2 < 0 ? "%i%% L" : slider2 > 0 ? "%i%% R" : "0%%", 0, 1000000);
		ui_split_next();
			slider3 = labelled_switch_vertical(slider3, "Invert", slider3 ? "on" : "off");
		ui_pop();
	ui_pop();

	update_display();
) : ui_screen() == "delay-analysis" ? (
	control_dialog("Delay analysis", gfx_w*0.9, gfx_h*0.5, "done", -1);

	/*
	ui_split_left(60);
		ui_padright();
		ui_split_bottom(100);
			g_zoom = labelled_dial_vertical(g_zoom, 1, 0.01, 0, "Zoom", 0, "", 1, 1);
		ui_pop();
	ui_pop();
	*/

	control_background_technical();
       ui_graph_step(delay_bufferSum, delay_bufferlength, 1, 0, 0);
       ui_hover() ? (
		mouse_sample = ceil((ui_mouse_xratio() - 0.5)*delay_bufferlength);
		ui_align(1, 1);
		ui_textnumber(mouse_sample, "%i samples");
		ui_align(0, 1);
		ui_textnumber(mouse_sample/srate*1000, "%fms");

		ui_colora(255, 255, 255, 0.5);
		gfx_line(mouse_x, ui_top(), mouse_x, ui_bottom());
       );

	ui_push();
		ui_color(255, 255, 255);
		ui_align(delay_samples >= delay_bufferlength*0.1 ? 0 : 1, 0);
		ui_split_top(gfx_texth);
			g_ms = delay_samples/srate*1000;
			g_ms >= 0 ? (
				ui_textnumber(g_ms, "Ch1 is %fms ahead");
			) : (
				ui_textnumber(-g_ms, "Ch0 is %fms ahead");
			);
		ui_pop();
		ui_split_top(gfx_texth);
			ui_textnumber(delay_samples, "(peak at %i samples)");
		ui_pop();
		ui_split_top(gfx_texth);
			ui_text(delay_phase > 0 ? "Phase: aligned" : "Phase: inverted");
		ui_pop();
	ui_pop();

       control_finish_technical();
) : control_system();

@serialize

file_var(0, fade_time);
file_var(0, reference_db);
