desc:Panalysis (by Geraint Luff)

in_pin:Left
in_pin:Right
out_pin:Left
out_pin:Right

slider1:1<0,2,0.01>-Width
slider2:0<-1,1,0.01>-Centre Pan
slider3:0<-1,1,0.01>-Input Pan

import ui-lib.jsfx-inc

@init

freemem = ui_setup(0);
buffer_length = 32768;
freemem = (buffer0 = freemem) + buffer_length;
freemem = (buffer1 = freemem) + buffer_length;
buffer_index = 0;

DISPLAY_SCREEN = 5;
ui_reserve_image(DISPLAY_SCREEN);

last_update_time = 0;
fade_time = 1;
last_index = 0;

!fade_time ? fade_time = 0.1;

@sample

left = spl0;
right = spl1;

leftpan = 0.5 - slider1*0.5 + slider2*0.5;
rightpan = 0.5 + slider1*0.5 + slider2*0.5;

spl0 = left*(1 - leftpan) + right*(1 - rightpan);
spl1 = left*leftpan + right*rightpan;

buffer0[buffer_index] = spl0;
buffer1[buffer_index] = spl1;

buffer_index += 1;
buffer_index >= buffer_length ? (
	buffer_index = 0;
);

@gfx 510 660

function update_display() local(dest, imgW, imgH, t, dt, i, x, y, cx, cy, cr, mag) (
	control_background_technical();
	ui_push_clip();
		dest = gfx_dest;
		gfx_getimgdim(DISPLAY_SCREEN, imgW, imgH);
		imgW != ui_width() || imgH != ui_height() ? (
			gfx_setimgdim(DISPLAY_SCREEN, imgW = ui_width(), imgH = ui_height());
			gfx_dest = DISPLAY_SCREEN;
			ui_color(0, 0, 0);
			gfx_rect(0, 0, imgW, imgH);
		);
		gfx_dest = DISPLAY_SCREEN;
		
		t = time_precise();
		dt = t - last_update_time;
		last_update_time = t;
	
		// Fade     
		alpha = 1 - exp(-dt/fade_time);
		gfx_gradrect(0, 0, imgW, imgH, 0, 0, 0, alpha);
	
		mag = pow(10, reference_db/20);
		cx = imgW*0.5;
		cy = imgH*0.5;
		cr = min(imgW, imgH)*0.45/2;
		i = 0;
		while (i < buffer_index) (
			x = cx + (buffer1[i] - buffer0[i])*cr/mag;
			y = cy - (buffer0[i] + buffer1[i])*cr/mag;
			i ? (
				gfx_lineto(x, y, 1);
			) : (
				gfx_x = x;
				gfx_y = y;
			);
			i += 1;
		);
		buffer_index = 0;
		
		gfx_dest = dest;
		gfx_x = ui_left();
		gfx_y = ui_top();
		gfx_a = 1;
		gfx_blit(DISPLAY_SCREEN, 1, 0);

		cx += ui_left();
		cy += ui_top();
		ui_push();
			ui_colora(64, 192, 256, 0.7);
			gfx_line(cx - 2*cr*slider1, cy, cx + 2*cr*slider2, cy - 2*cr);
			gfx_line(cx + 2*cr*slider1, cy, cx + 2*cr*slider2, cy - 2*cr);
			gfx_line(cx + 2*cr*slider1, cy, cx - 2*cr*slider2, cy + 2*cr);
			gfx_line(cx - 2*cr*slider1, cy, cx - 2*cr*slider2, cy + 2*cr);
		ui_pop();

		ui_push();
			ui_colora(255, 255, 255, 0.75);
			gfx_line(cx - 2*cr, cy, cx, cy - 2*cr);
			gfx_line(cx + 2*cr, cy, cx, cy + 2*cr);
			ui_colora(256, 64, 64, 1);
			gfx_line(cx + 2*cr, cy, cx, cy - 2*cr);
			gfx_line(cx - 2*cr, cy, cx, cy + 2*cr);
		ui_pop();
	ui_pop();
	control_finish_technical();
);

function labelled_dial_vertical(value, low, high, bias, label, formatvalue, formatstring, default) (
	ui_push_height(50);
		value = control_dial(value, low, high, bias);
		ui_click() && ui_clickcount() == 2 ? (
			value = default;
		);
	ui_pop();
	ui_push_above(50);
		ui_text(label);
	ui_pop();
	ui_push_below(50);
		ui_textnumber(formatvalue, formatstring);
	ui_pop();
	value;
);

control_start("main", "tron");

ui_screen() == "main" ? (
	ui_split_top(150);
		ui_split_rightratio(2/5);
			control_group("display");
			ui_split_leftratio(1/2);
				reference_db = labelled_dial_vertical(reference_db, -40, 0, 2, "Reference", reference_db, "%-.1fdB", 0);
			ui_split_next();
				fade_time = labelled_dial_vertical(fade_time, 0.01, 1, 4.6, "Fade", fade_time*1000, "%ims", 0.1);
			ui_pop();
		ui_pop();
		
		control_group("stereo field");
		ui_split_leftratio(1/3);
			slider1 = labelled_dial_vertical(slider1, 0, 2, 0, "Width", floor(slider1*100 + 0.5), "%i%%", 1);
		ui_split_next();
			slider2 = labelled_dial_vertical(slider2, -1, 1, 0, "Centre Pan", abs(slider2*100), slider2 < 0 ? "%i%% L" : slider2 > 0 ? "%i%% R" : "0%%", 0);
		ui_split_next();
			slider3 = labelled_dial_vertical(slider3, -1, 1, 0, "Input Pan", 0, "", 0);
		ui_pop();
	ui_pop();
	
	update_display();
) : control_system();

@serialize

file_var(0, fade_time);
file_var(0, reference_db);